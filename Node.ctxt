#BlueJ class context
comment0.params=id\ type
comment0.target=Node(int,\ NodeType)
comment1.params=
comment1.target=void\ reset()
comment10.params=
comment10.target=float\ lastOutput()
comment11.params=
comment11.target=void\ calculateInputOutput()
comment12.params=
comment12.target=void\ update()
comment13.params=
comment13.target=void\ updateAncestors()
comment14.params=updated
comment14.target=void\ updateAncestors(java.util.List)
comment15.params=input
comment15.target=float\ activation(float)
comment16.params=x
comment16.target=float\ modifiedSigmoid(float)
comment17.params=x
comment17.target=float\ sigmoid(float)
comment18.params=n
comment18.target=boolean\ equals(Node)
comment19.params=n
comment19.target=boolean\ hasAncestor(Node)
comment2.params=
comment2.target=void\ resetAncestors()
comment20.params=n\ visited
comment20.target=boolean\ hasAncestor(Node,\ java.util.List)
comment21.params=o
comment21.target=int\ compareTo(java.lang.Object)
comment3.params=reseted
comment3.target=void\ resetAncestors(java.util.List)
comment4.params=
comment4.target=Node\ copyWithoutConnections()
comment4.text=public\ Node\ copy(){//what\ about\ recurrent\ connections?\n\ \ \ \ \ \ \ \ Node\ copy\ \=\ new\ Node(id,\ type);\n\ \ \ \ \ \ \ \ for\ (Connection\ c\ \:\ inputs){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Node\ in\ \=\ c.in.copy();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Connection\ connectionCopy\ \=\ new\ Connection(in,\ copy,\ c.weight,\ c.enabled,\ c.innovation);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ connectionCopy.recurrent\ \=\ c.recurrent;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ copy.addInput(connectionCopy);\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ return\ copy;\n}
comment5.params=c
comment5.target=void\ addInput(Connection)
comment6.params=c
comment6.target=void\ removeInput(Connection)
comment7.params=
comment7.target=java.util.List\ getInputs()
comment8.params=
comment8.target=NodeType\ getType()
comment9.params=
comment9.target=float\ output()
numComments=22
